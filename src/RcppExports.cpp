// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_cbind
NumericMatrix rcpp_cbind(NumericVector A, NumericMatrix B);
RcppExport SEXP _TallerRcpp_rcpp_cbind(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_cbind(A, B));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_maxmin
NumericMatrix rcpp_maxmin(NumericMatrix A, NumericMatrix B);
RcppExport SEXP _TallerRcpp_rcpp_maxmin(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_maxmin(A, B));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_multimatrix
void rcpp_multimatrix(NumericMatrix A, NumericMatrix B);
RcppExport SEXP _TallerRcpp_rcpp_multimatrix(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_multimatrix(A, B);
    return R_NilValue;
END_RCPP
}
// rcpp_rbind
NumericMatrix rcpp_rbind(NumericVector A, NumericMatrix B);
RcppExport SEXP _TallerRcpp_rcpp_rbind(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_rbind(A, B));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_whichmax
DataFrame rcpp_whichmax(NumericMatrix A);
RcppExport SEXP _TallerRcpp_rcpp_whichmax(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_whichmax(A));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_whichmin
DataFrame rcpp_whichmin(NumericMatrix A);
RcppExport SEXP _TallerRcpp_rcpp_whichmin(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_whichmin(A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TallerRcpp_rcpp_cbind", (DL_FUNC) &_TallerRcpp_rcpp_cbind, 2},
    {"_TallerRcpp_rcpp_maxmin", (DL_FUNC) &_TallerRcpp_rcpp_maxmin, 2},
    {"_TallerRcpp_rcpp_multimatrix", (DL_FUNC) &_TallerRcpp_rcpp_multimatrix, 2},
    {"_TallerRcpp_rcpp_rbind", (DL_FUNC) &_TallerRcpp_rcpp_rbind, 2},
    {"_TallerRcpp_rcpp_whichmax", (DL_FUNC) &_TallerRcpp_rcpp_whichmax, 1},
    {"_TallerRcpp_rcpp_whichmin", (DL_FUNC) &_TallerRcpp_rcpp_whichmin, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_TallerRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
